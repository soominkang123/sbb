
 src/main/resources 
    templates   :  View 페이지가 위치해야될 폴더 , thymeleaf <== spring boot 
    static		:  외부 css, 외부 js, 그림 이미지 
    application.properties : spring boot의 각종 설정, DB 설정, JPA, View 설정, 톰켓 포트 설정 
 
 
  build.gradle : 라이브러리 적용 파일  (그래들), 설정후 오른쪽 클릭 (gradle => reflash gradle project ) 적용
  
  어노테이션 : @  <== 프레임워크 의 기술을 자동으로 처리 
  	 - @Controller  <== client 의 요청을 받는 클래스라고 정의
  	 		- class 블락 할당 , 스프링 프레임워크에 빈(객체화) 등록 (RAM 등록) 
  	 - @GetMapping("/hello") : client 의 get 요청을 처리하는 어노테이션 
  	 		- 메소드 위에 할당. 
  	 		http://localhost:8585/hello
  	 		- url 
  	 		- form method="get" 
  	 		- a href = "" 
  	 		
  	 - @PostMapping ("longin.do") 
  	 		- form method="post" action = "login.do" 
  	 		
  	 - @ResponseBody : 
  	 		- 메소드 위에 할당 , JSON 포멧으로 전송 , 문자열 자체를 전송 	
  	 		
 
 Spring 에서 라이브러리 관리 , JDK 와 Spring 버젼에 관련된 호환성 문제를 자동으로 관리 
 
    - 메이븐 : xml 형식으로 관리 
    	https://mvnrepository.com/
    	pom.xml : 파일에서 라이브러리 관리 
    	
    - 그래들 : 그루비 문법으로 쉽게 관리. 
    	build.gradle  : 파일에서 관리 
    	
  
 STS4에서 Java EE로 확장 : html, jsp 
       - 엔코딩 타입 : UTF-8 적용 
 
 lombok 작동 :
 
 JPA : 인터페이스 , SQL 쿼리 없이 자바의 객체로 DB의 테이블을 생성 , 
 		SQL 쿼리없이 자바의 객체의 메소드로 CRUD 
 	- 유지 보수를 아주 쉽게 할 수 있다. 
 	- JPA 를 구현한 구현체 하이버네이트  
 		
 	ORM : 자바의 클래스나 메소드로 DB를 접근 할 수 있도록 하는 기술,  
 		- 유지 보수를 쉽게함 
 		- 마이바티스(금융권, SI), JPA(솔루션) 
 
 ===============================================
 build.gradle : 라이브러리 등록 
   1. JPA 
   2. JDBC 
   
   3. H2 DB
   4. Oracle DB		
   5. MySQL DB 
 ==================================================
 application.properties	 <== 설정 
 
 
 =======================================
 JPA 라이브러리가 등록 되었을 경우 
 @Entity : class 위에 할당. 
    - DB의 테이블을 매핑 클래스 
 		//Question : 객체명 = 테이블명 
		//  필드 : 테이블의 컬럼과 연결   
	//@Id : 필드위에 할당 , Primary Key (중복된 값을 못 넣도록 설정 ), 테이블에 반드시 1개가 적용  
	//@GeneratedValue : 자동으로 값을 증가해서 생성해줌 , @ID 같이 부여 
	//@Column : 컬럼의 제약 사항을 적용 
	
	//질문(Question) : 1 , 답변(Answer) : 다 
	//하나의 질문에 대해서 모든 답변을 가져 올 수 있다. 
	// cascade=CascadeType.REMOVE   <== 질문이 제거 될때, 질문에 해당하는 모든 답변을 함께 제거함. 
	@OneToMany(mappedBy = "question", cascade=CascadeType.REMOVE )

	//Foreign Key : Answer 테이블은 Question 테이블을 참조함. 
	// @MayToOne : JPA에서 테이블 간의 관계 설정 , 자식 테이블(Answer)에서 부모 테이블(Question)을 참조 
	// question 컬럼은 Question 테이블의 Primary Key 의 값이 들어옴 
	// question 컬럼이름이 question_id 로 이름이 바뀜. 
	@ManyToOne
	
=======================================
ORM : MyBatis , JPA  , SQL 쿼리문을 쓰지 않고 메소드를 사용해서 CRUD 
Repository : DAO를 Repository 라고 호칭한다. DB의 CRUD 하는 메소드가 적용 되어있는 인터페이스   
	  
 public interface QuestionRepository extends JpaRepository<Question, Integer> { }
 	//상위 인터페이스의 모든 메소드가 상속 되어 내려옴
	/* JpaRepository 에서 선언된 메소드가 상속되어 내려옴 
	   findAll()  : select * from question  
	   save()     : insert,  update 
	   delete()   : delete 
	 */   

JUnit Test : 로직을 모두 생성하기전에 DB에 값이 잘 CRUD 되는지 테스트함. 
   - 라이브러리 등록 



전체적인 로직 : 

client ===> Controller ===>  Service (로직을 처리) (DTO :  Entity )  ==> Repository 

   Service 클래스 : 
   		1. 반복적 코드를 방지할 수 있다. 
   		2. 보안을 향상할 수 있다. ( Controller 에서 Entity 클래스, Repository 를 직접 접근 하지 않는다) 
   		3. DTO(client) ==> Entity(DB) ,       Entity(DB) ==> DTO(client)  


src/main/resource/templates : 뷰 페이지가 위치 (Thymeleaf) , *.html 
src/main/resource/static    : 외부 CSS, 외부 JavaScript, Image   

Thymeleaf 의 layout : JSP Include 와 동일한 처리를 담당. 
	- 중복 된 코드를 방지 할 수 있다. 
	- 유지 보수를 아주 쉽게 할 수 있다. 
	- 라이브러리가 등록 되어있어야 함 
			implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
			implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	
유효성 체크 : 
	폼에 값을 체크해서 DB에 저장 
	- JavaScript : FrontEnd 체크 
	- validate 라이브러리를 사용해서 서버에서 유효성 체크 : 모바일 환경에서 

th:field="*{subject}"  <== name = "subject" id="subject" value="subject"
th:field="*{content}"	<== name = "content" id="content" value="content"



=============================================
스프링 시큐리티 설치하기
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    톰켓 부팅 후 작동됨 

로그인후 세션 유지기간 : 30분 , 180초 

사용자명 : user 
암호    : a4d08a92-ad03-4278-b8ba-0a006aa5e75d
Using generated security password: a4d08a92-ad03-4278-b8ba-0a006aa5e75d

-- 모든 페이지는 인증을 통해서 접근 
-- H2 Console 접근이 차단 

Spring Security 설정 파일에서 모들 설정 

MVC(Model, view, Controller) Model
   - 협업시 다른 개발자의 코드 쉽게 이해가능
   - 유지 보수를 쉽게 할 수 있다.
   - Model : 비즈니스 로직을 처리(메소드), Service Layer 
   - View  : 화면에 출력 : Thymeleaf , JSP, React , ...
   - Controller : 1. client 요청 , 2. Service에 메소드 호출 , 결과값을 리턴 <-- 비즈니스 로직 처리
    3. View 페이지를 전송

client ==> questionForm(DTO) ==> Controller ==> Service ==> Repository ==> Entity







 
 
 
 	 
   
 
 
  
  
  
  
  
  	 		